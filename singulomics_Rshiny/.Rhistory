rm(res_Mean)
load("~/Downloads/GSE214530_res.rda")
res_Mean %>% dplyr::filter(cauchy_p < 0.05) %>% .$Gene -> GSE214530_cyclic_genes
rm(res_Mean)
load("~/Downloads/GSE240147_res_list.rda")
res_list %>%
purrr::map(function(df_){
df_ %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene
}) %>% purrr::reduce(., c) %>% unique() -> GSE240147_cyclic_genes
rm(res_list)
load("~/Downloads/GSE143524_res_list.rda")
res_list$GFP %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene -> GSE143524_cyclic_genes
load(res_list, file="~/Downloads/GSE240693_res_list.rda")
rm(list=ls())
gc()
rm(list=ls())
library(tidyverse)
load("~/Downloads/Fig2_resolution_tuning.rda")
p_ggvenn$data
snRNA_cyclic_genes = gene_list$BH_0.05$fc_1.5_1.2$RNA
rm(list = setdiff(ls(), ls(pattern = "^snRNA")))
load("~/Downloads/GSE11923_res.rda")
res_list$one_hour %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene -> GSE11923_cyclic_genes
rm(res_list)
load("~/Downloads/GSE54652_res.rda")
res_Mean_list$Liv$two_hour %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene -> GSE54652_cyclic_genes
rm(res_Mean_list)
load("~/Downloads/GSE70499_res_list.rda")
res_list$`3_meatacell`$metacell_1_2_3 %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene %>%
gsub("gene:(.+)", "\\1", .) -> GSE70499_cyclic_genes
GSE70499_cyclic_genes %>% length() #5102
library(org.Mm.eg.db)
library(AnnotationDbi)
sym <- mapIds(
org.Mm.eg.db,
keys = GSE70499_cyclic_genes,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first"
)
sym %>% unname() %>% unique() -> GSE70499_cyclic_genes #4943
rm(sym)
load("~/Downloads/GSE114400_res_list.rda")
#res_list %>% purrr::map(function(df_){df_ %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene}) %>%
res_list %>% purrr::map(function(df_){df_ %>% dplyr::filter(cauchy_p < 0.01) %>% .$Gene}) %>%
purrr::reduce(., c) %>% unique() -> GSE114400_cyclic_genes
length(GSE114400_cyclic_genes)
rm(res_list)
load("~/Downloads/GSE205881_res.rda")
res_Mean %>% dplyr::filter(cauchy_BH.Q < 0.01) %>% .$Gene -> GSE205881_cyclic_genes
rm(res_Mean)
load("~/Downloads/GSE214530_res.rda")
res_Mean %>% dplyr::filter(cauchy_p < 0.05) %>% .$Gene -> GSE214530_cyclic_genes
rm(res_Mean)
load("~/Downloads/GSE240147_res_list.rda")
res_list %>%
purrr::map(function(df_){
df_ %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene
}) %>% purrr::reduce(., c) %>% unique() -> GSE240147_cyclic_genes
rm(res_list)
load("~/Downloads/GSE143524_res_list.rda")
res_list$GFP %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene -> GSE143524_cyclic_genes
load("~/Downloads/GSE240693_res_list.rda")
load("~/Downloads/GSE240693_res_list.rda")
load("~/Downloads/GSE240693_res_list.rda")
rm(res_list)
rm(list=ls())
gc()
list(DD = "DD\\d+-L", CON = "CON.+Liver") %>%
purrr::map(function(group_){
list.files("~/Downloads/GSE240693_RAW", pattern = group_, full.names = T) -> files_
files_ %>%
#      .[1:2] %>%
purrr::map(function(file_){
read_tsv(file_, col_names = T) -> df_
c("Gene", colnames(df_)[2]) -> colnames(df_)
df_
}) %>% purrr::reduce(full_join, by = "Gene") -> df_
df_$Gene -> Gene_
library(org.Mm.eg.db)
library(AnnotationDbi)
sym <- mapIds(
org.Mm.eg.db,
keys = Gene_,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first"
)
sprintf("%s %s", length(Gene_), length(sym))
df_$Gene = sym
df_
}) -> mat_list
mat_list %>%
purrr::map(function(df_){
df_[!is.na(df_$Gene), ] -> df_
df_ %>%
dplyr::group_by(Gene) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
column_to_rownames("Gene") -> df_
}) -> mat_list
mat_list %>%
purrr::map2(.x=.,.y=names(.),.f=function(df_, group_){
if (group_ == "DD"){
colnames(df_) %>% gsub("DD(\\d+)-.+", "\\1", .) %>% as.numeric() -> time_
colnames(df_) %>% gsub(".+L(\\d+)-.+", "\\1", .) %>% as.numeric() -> rep_
}else{
colnames(df_) %>% gsub("CT(\\d+)_.+", "\\1", .) %>% as.numeric() -> time_
colnames(df_) %>% gsub(".+CON-(\\d+)_.+", "\\1", .) %>% as.numeric() -> rep_
}
new_col_ = sprintf("ZT%s_REP%s", time_, rep_)
colnames(df_) = new_col_
df_
}) -> mat_list
mat_list %>%
purrr::map(function(df_){
colSums(df_) %>% median() -> median_
df_ %>% dplyr::mutate(across(everything(), function(x){(x/sum(x))*median_})) -> df_
df_ %>% rownames_to_column("Gene") -> df_
}) -> mat_list
source("~/Dropbox/singulomics/github/Calculate_HMP_1.R")
radian_to_phase = function(radian){
phase = (radian/(2*pi))*24
return(phase)
}
mat_list %>%
purrr::map(function(df_){
write.csv(df_, "~/Downloads/temp_mean.csv", row.names = F, quote = F, col.names = T)
res_Mean = cyclic_HMP(raw_data = "~/Downloads/temp_mean.csv", minper_ = 24)
res_Mean %>%
dplyr::mutate(F24_Phase = radian_to_phase(HR_phi)) %>%
dplyr::select(Gene, MetaCycle_JTK_pvalue, MetaCycle_JTK_BH.Q, HR_p.value, HR_q.value, MetaCycle_JTK_amplitude, F24_Phase, MetaCycle_meta2d_Base, MetaCycle_meta2d_AMP, MetaCycle_meta2d_rAMP) %>%
recal_cauchy_p_and_hmp(.) -> res_Mean
}) -> res_list
save(res_list, "~/Downloads/GSE240693_res_list.rda")
save(res_list, "~/Downloads//GSE240693_res_list.rda")
save(res_list, "~/Downloads/GSE240693_res_list.rda")
res_list
save(res_list, file = "~/Downloads/GSE240693_res_list.rda")
rm(list=ls())
gc()
load("~/Downloads/Fig2_resolution_tuning.rda")
p_ggvenn$data
snRNA_cyclic_genes = gene_list$BH_0.05$fc_1.5_1.2$RNA
rm(list = setdiff(ls(), ls(pattern = "^snRNA")))
load("~/Downloads/GSE11923_res.rda")
res_list$one_hour %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene -> GSE11923_cyclic_genes
rm(res_list)
load("~/Downloads/GSE54652_res.rda")
res_Mean_list$Liv$two_hour %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene -> GSE54652_cyclic_genes
rm(res_Mean_list)
load("~/Downloads/GSE70499_res_list.rda")
res_list$`3_meatacell`$metacell_1_2_3 %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene %>%
gsub("gene:(.+)", "\\1", .) -> GSE70499_cyclic_genes
GSE70499_cyclic_genes %>% length() #5102
library(org.Mm.eg.db)
library(AnnotationDbi)
sym <- mapIds(
org.Mm.eg.db,
keys = GSE70499_cyclic_genes,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first"
)
sym %>% unname() %>% unique() -> GSE70499_cyclic_genes #4943
rm(sym)
load("~/Downloads/GSE114400_res_list.rda")
#res_list %>% purrr::map(function(df_){df_ %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene}) %>%
res_list %>% purrr::map(function(df_){df_ %>% dplyr::filter(cauchy_p < 0.01) %>% .$Gene}) %>%
purrr::reduce(., c) %>% unique() -> GSE114400_cyclic_genes
length(GSE114400_cyclic_genes)
rm(res_list)
load("~/Downloads/GSE205881_res.rda")
res_Mean %>% dplyr::filter(cauchy_BH.Q < 0.01) %>% .$Gene -> GSE205881_cyclic_genes
rm(res_Mean)
load("~/Downloads/GSE214530_res.rda")
res_Mean %>% dplyr::filter(cauchy_p < 0.05) %>% .$Gene -> GSE214530_cyclic_genes
rm(res_Mean)
load("~/Downloads/GSE240147_res_list.rda")
res_list %>%
purrr::map(function(df_){
df_ %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene
}) %>% purrr::reduce(., c) %>% unique() -> GSE240147_cyclic_genes
rm(res_list)
load("~/Downloads/GSE143524_res_list.rda")
res_list$GFP %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene -> GSE143524_cyclic_genes
rm(res_list)
load("~/Downloads/GSE240693_res_list.rda")
res_list %>%
purrr::map(function(df_){
df_ %>% dplyr::filter(cauchy_BH.Q < 0.05) %>% .$Gene
}) %>% unlist() %>% unname() %>% unique() -> GSE240693_cyclic_genes
length(GSE240693_cyclic_genes)
list(snRNA = snRNA_cyclic_genes,
GSE11923 = GSE11923_cyclic_genes,
GSE54652 = GSE54652_cyclic_genes,
GSE70499 = GSE70499_cyclic_genes,
GSE114400 =GSE114400_cyclic_genes,
GSE205881 = GSE205881_cyclic_genes,
GSE214530 = GSE214530_cyclic_genes,
GSE240147 = GSE240147_cyclic_genes,
GSE143524 = GSE143524_cyclic_genes,
GSE240693 = GSE240693_cyclic_genes
) %>%
ggvenn::list_to_data_frame() %>%
dplyr::mutate(across(!matches("key"), function(x){x %>% as.integer()})) %>%
as.data.frame() %>%
UpSetR::upset(sets = c("snRNA", "GSE11923", "GSE54652", "GSE70499", "GSE114400",
"GSE205881", "GSE214530", "GSE240147", "GSE143524"), keep.order = T, order.by = "freq")
list(snRNA = snRNA_cyclic_genes,
GSE11923 = GSE11923_cyclic_genes,
GSE54652 = GSE54652_cyclic_genes,
GSE70499 = GSE70499_cyclic_genes,
GSE114400 =GSE114400_cyclic_genes,
GSE205881 = GSE205881_cyclic_genes,
GSE214530 = GSE214530_cyclic_genes,
GSE240147 = GSE240147_cyclic_genes,
GSE143524 = GSE143524_cyclic_genes,
GSE240693 = GSE240693_cyclic_genes
) %>%
ggvenn::list_to_data_frame() %>%
dplyr::mutate(across(!matches("key"), function(x){x %>% as.integer()})) %>%
as.data.frame() %>%
UpSetR::upset(sets = c("snRNA", "GSE11923", "GSE54652", "GSE70499", "GSE114400",
"GSE205881", "GSE214530", "GSE240147", "GSE143524", "GSE240693"), keep.order = T, order.by = "freq")
1192/6700
rm(list=ls())
load("~/Downloads/Fig2_resolution_tuning.rda")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
ggplot(aes(x = RNA_log2fc, y = log(RNA_n_cyclic_genes, 10))) +
geom_line(color = "blue") +
geom_vline(xintercept = log(1.5,2)) +
ylab("log10(Number of genes)") +
xlab("RNA expression log2 fold change") +
ggtitle("snRNA") +
theme_classic() -> p_RNA_line
p_RNA_line
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct()
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct()
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(names_to = "group", values_to = "value")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = everything(), names_to = "group", values_to = "value")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = everything(), names_to = "group", values_to = "value") %>%
dplyr::mutate(assay = "RNA", group = gsub("RNA_(.+)", "\\1", group))
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct()
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -RNA_log2fc, names_to = "group", values_to = "value")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -RNA_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "RNA_n_cyclic_genes")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -RNA_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "RNA_n_cyclic_genes") %>%
dplyr::filter(group = "RNA")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -RNA_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "RNA_n_cyclic_genes") %>%
dplyr::mutate(group = "RNA")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -RNA_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "RNA_n_cyclic_genes") %>%
dplyr::mutate(group = "RNA") -> df_1
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(ATAC_fc, ATAC_log2fc, ATAC_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -ATAC_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "ATAC_n_cyclic_genes")
df_1
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(ATAC_fc, ATAC_log2fc, ATAC_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -ATAC_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "ATAC_n_cyclic_genes")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(ATAC_fc, ATAC_log2fc, ATAC_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -ATAC_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "ATAC_n_cyclic_genes") %>%
dplyr::mutate(group = "ATAC")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(ATAC_fc, ATAC_log2fc, ATAC_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -ATAC_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "ATAC_n_cyclic_genes") %>%
dplyr::mutate(group = "ATAC") %>%
dplyr::arrange(ATAC_log2fc)
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(ATAC_fc, ATAC_log2fc, ATAC_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -ATAC_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "ATAC_n_cyclic_genes") %>%
dplyr::mutate(group = "ATAC") %>%
dplyr::arrange(ATAC_log2fc) %>%
"colnames<-"(., c("log2_fc", "group", "n_genes"))
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(ATAC_fc, ATAC_log2fc, ATAC_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -ATAC_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "ATAC_n_cyclic_genes") %>%
dplyr::mutate(group = "ATAC") %>%
dplyr::arrange(ATAC_log2fc) %>%
"colnames<-"(., c("log2_fc", "group", "n_genes")) -> df_2
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -RNA_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "RNA_n_cyclic_genes") %>%
dplyr::mutate(group = "RNA")
df_summary %>%
dplyr::filter(BH.Q == 0.05) %>%
dplyr::select(RNA_fc, RNA_log2fc, RNA_n_cyclic_genes) %>%
distinct() %>%
pivot_longer(cols = -RNA_log2fc, names_to = "group", values_to = "value") %>%
dplyr::filter(group == "RNA_n_cyclic_genes") %>%
dplyr::mutate(group = "RNA") %>%
"colnames<-"(., c("log2_fc", "group", "n_genes")) -> df_1
df_1
rbind(df_1, df_2)
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line()
patchwork::wrap_plots(p_RNA_line, p_ATAC_line, ncol = 2, guides = "collect")
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line()
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line() +
xlab("log2 fold change (Amplitude)") +
ylab("log10(Number of cyclic genes)") +
theme_minimal()
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line() +
gemv_line(xintercept = log(1.5,2), color = "blue") +
geom_vline(xintercept = log(1.2,2), color = "red") +
xlab("log2 fold change (Amplitude)") +
ylab("log10(Number of cyclic genes)") +
theme_minimal()
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line() +
geom_line(xintercept = log(1.5,2), color = "blue") +
geom_vline(xintercept = log(1.2,2), color = "red") +
xlab("log2 fold change (Amplitude)") +
ylab("log10(Number of cyclic genes)") +
theme_minimal()
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line() +
geom_vline(xintercept = log(1.5,2), color = "blue") +
geom_vline(xintercept = log(1.2,2), color = "red") +
xlab("log2 fold change (Amplitude)") +
ylab("log10(Number of cyclic genes)") +
theme_minimal()
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line() +
geom_vline(xintercept = log(1.5,2), color = "blue", linetype = "dash") +
geom_vline(xintercept = log(1.2,2), color = "red", linetype = "dash") +
xlab("log2 fold change (Amplitude)") +
ylab("log10(Number of cyclic genes)") +
theme_minimal()
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line() +
geom_vline(xintercept = log(1.5,2), color = "blue") +
geom_vline(xintercept = log(1.2,2), color = "red") +
xlab("log2 fold change (Amplitude)") +
ylab("log10(Number of cyclic genes)") +
theme_minimal()
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line() +
geom_vline(xintercept = log(1.5,2), color = "blue", linetype = "dashed") +
geom_vline(xintercept = log(1.2,2), color = "red") +
xlab("log2 fold change (Amplitude)") +
ylab("log10(Number of cyclic genes)") +
theme_minimal()
rbind(df_1, df_2) %>%
ggplot(aes(x = log2_fc, y = log(n_genes,10), group = group, color = group)) +
geom_line() +
geom_vline(xintercept = log(1.5,2), color = "blue", linetype = "dashed") +
geom_vline(xintercept = log(1.2,2), color = "red", linetype = "dashed") +
xlab("log2 fold change (Amplitude)") +
ylab("log10(Number of cyclic genes)") +
theme_minimal()
rm(list=ls())
gc()
install.packages("shinylive")
#install.packages("shinylive")
library(shinylive)
library(shiny)
library(tidyverse)
penguins_csv <- "https://raw.githubusercontent.com/jcheng5/simplepenguins.R/main/penguins.csv"
df <- readr::read_csv(penguins_csv)
# Find subset of columns that are suitable for scatter plot
df_num <- df |> select(where(is.numeric), -Year)
# Find subset of columns that are suitable for scatter plot
df_num <- df |> dplyr::select(where(is.numeric), -Year)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "Bill Length (mm)"),
varSelectInput("yvar", "Y variable", df_num, selected = "Bill Depth (mm)"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(df$Species),
selected = unique(df$Species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
library(bslib)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "Bill Length (mm)"),
varSelectInput("yvar", "Y variable", df_num, selected = "Bill Depth (mm)"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(df$Species),
selected = unique(df$Species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
df |> filter(Species %in% input$species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = Species),
geom_point(),
if (input$smooth) geom_smooth()
)
if (input$show_margins) {
margin_type <- if (input$by_species) "density" else "histogram"
p <- ggExtra::ggMarginal(p, type = margin_type, margins = "both",
size = 8, groupColour = input$by_species, groupFill = input$by_species)
}
p
}, res = 100)
}
shinyApp(ui, server)
rm(list=ls())
getwd()
setwd("~/Downloads/singulomics_Rshiny/")
library(shiny)
runApp()
library(shiny)
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='mouselivermultiomics',
token='3518F9D3CF80607D55A2AB67DDDF3B3A',
secret='QCDRkc4QXhqsTHYACewpyeezcqI+C8ZCN6+Ihyi+')
deployApp()
